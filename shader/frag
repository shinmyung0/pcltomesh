uniform int outputID;
uniform sampler2D envmap;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;

#define PI 3.1415926

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadeEnvmapReflection();

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        gl_FragColor = vec4(shadeEnvmapReflection(), 1.0);
        return;
    }
    if(outputID == 3)
    {
        // Do something interesting here for extra credit.
        // gl_FragColor = vec4(???, 1.0);
        // return;
    }
    // ...
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    float diffuse = abs(dot(out_vec, n));
    return vec3(diffuse);
}

vec3 shadePhong(vec3 lightPos)
{   // TODO Part 6.
    // TODO Compute Phong shading here. You can choose any color you like. But please
    // TODO make sure that you have noticeable specular highlights in the shading.
    // TODO Variables to use: eyePos, lightPos, normal, vertex
    vec3 in_vec = normalize(vertex - lightPos);
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    vec3 h = normalize(in_vec - out_vec);

    float Kd = 0.3;
    float Ks = 0.3;
    float Ka = 0.3;
    float I = 1.3;
    float P = 9.0;

    float Ld = Kd * I * max(0, dot(n, in_vec));
    float Ls = Ks * I * pow(max(0, dot(n, h)), P);
    float La = Ks * I;
    
    return vec3(La + Ld + Ls);
}

vec3 shadeEnvmapReflection()
{   // TODO Part 6.
    // TODO Compute environment mapping based on reflection direction here.
    // TODO First compute the reflection direction using eyePos, normal and vertex.
    // TODO Then convert the reflection direction to spherical coordinates (theta, phi). 
    // TODO Note that the up vector is along +Z axis.
    // TODO Finally, grab the color from envmap using (theta, phi).
    // TODO You will need to use function "vec4 texture2D(sampler2D tex, vec2 uv)" to 
    // TODO get colors from textures. 
    
    vec3 n = normalize(normal);
    vec3 in_vec = normalize(vertex - eyePos);
    float scale = 2.0 * dot(in_vec, n);
    vec3 out_vec = scale * n - in_vec;

    float ref_x = out_vec.x;
    float ref_y = out_vec.y;
    float ref_z = out_vec.z;

    float theta = atan(ref_y, ref_x);
    float phi = atan(sqrt(pow(ref_x, 2.0) + pow(ref_y, 2.0)), ref_z);
    vec2 uv = vec2(-theta/(2.0*PI), -phi/PI);

    vec4 texture = texture2D(envmap, uv);
    return vec3(texture.x, texture.y, texture.z);
    /* return vec3(uv.x, uv.y, 0); */
}
